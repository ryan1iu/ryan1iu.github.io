<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ByteIsle</title>
  
  <subtitle>one bit</subtitle>
  <link href="https://liurun.life/atom.xml" rel="self"/>
  
  <link href="https://liurun.life/"/>
  <updated>2025-08-30T00:20:51.682Z</updated>
  <id>https://liurun.life/</id>
  
  <author>
    <name>Ryan Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>论文精读：Self-training for Bridging the Cross-Geography Gap in Trajectory Prediction</title>
    <link href="https://liurun.life/2025/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%EF%BC%9AStarj/"/>
    <id>https://liurun.life/2025/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%EF%BC%9AStarj/</id>
    <published>2025-08-19T16:00:00.000Z</published>
    <updated>2025-08-30T00:20:51.682Z</updated>
    
    <content type="html"><![CDATA[<p>该论文旨在利用无监督自适应技术来解决轨迹预测模型的跨域问题，提出了一个被称作Straj的模型。该模型整体架构由三个部分组成，具体细节见下文。</p><h2 id="1-模型预训练"><a href="#1-模型预训练" class="headerlink" title="1.模型预训练"></a>1.模型预训练</h2><p>生成能够泛化到跨地理场景的高质量初始伪标签</p><ul><li>输入：<ul><li>已标注的源域数据</li><li>未标注的目标域数据</li><li>感兴趣智能体过去 $L_p$ 步的轨迹坐标 $P_a$</li><li>其他智能体 $P_o$</li><li>地图信息 $M$</li><li>现有轨迹预测器 $\mathcal{P}$<ul><li>$ϕ_a$ 智能体特征编码器</li><li>$ϕ_m$ 地图特征编码器</li><li>$ϕ_f$ 融合特征编码器</li><li>解码器 $φ$</li></ul></li></ul></li><li>过程：<ol><li>特征编码：预测器 $\mathcal{P}$ 首先通过特征编码器将输入数据转换为原始特征<ul><li>智能体特征 $\mathcal{A} &#x3D; ϕ_a(P_a, P_o)$</li><li>地图特征 $\mathcal{M} &#x3D; ϕ_m(P_a, M)$</li><li>融合特征 $\mathcal{F} &#x3D; ϕ_f(\mathcal{A}, \mathcal{M})$</li></ul></li><li>智能体和地图互补增强<ul><li>根据智能体或车道段与目标智能体的距离计算遮蔽概率</li><li>对 r%的智能体和车道段进行遮蔽，生成弱增强和强增强后的特征</li><li>通过权衡策略生成被遮蔽的融合特征 $\mathcal{F_{(W,S)}} &#x3D; ϕ_f \mathcal{(A_W,M_S)} ,$ 和 $\mathcal{F_{(S,W)}} &#x3D; ϕ_f \mathcal{(A_S,M_W)}$</li></ul></li><li>通过均方误差损失进行特征重建<ul><li>计算被遮蔽的智能体特征 ($\mathcal{A_W}$, $\mathcal{A_S}$)、地图特征 ($\mathcal{M_W}$, $\mathcal{M_S}$) 和融合特征 ($\mathcal{F_{(W,S)}}$, $\mathcal{F_{(S,W)}}$) 与其对应的原始未遮蔽特征 ($\mathcal{A}$, $\mathcal{M}$, $\mathcal{F}$) 之间的均方误差。</li><li>使模型重建出所有被遮蔽的智能体特征、地图特征和融合特征，使其与原始特征保持一致</li></ul></li><li>对于属于源域的智能体除了 $\mathcal{L}_{MSE}$ 之外，还会计算其预测轨迹与真实轨迹之间的预测误差 $\mathcal{L}_{pred}$</li></ol></li><li>输出：<ul><li>经过初步训练的预测器 $\mathcal{P}$,对跨地理场景中的异构元素分布更具鲁棒性和泛化能力</li><li>基于这个预训练的 $\mathcal{P}$，生成目标域的初始伪标签$H_0$</li></ul></li></ul><h2 id="2-伪标签更新"><a href="#2-伪标签更新" class="headerlink" title="2.伪标签更新"></a>2.伪标签更新</h2><p>确保伪标签的一致性和稳定性，促进预测器的稳定训练</p><ul><li>输入：<ul><li>经过预训练的预测器$\mathcal{P}$。</li><li>第i个epoch下的目标域智能体 $a$ 的伪轨迹$F_i$.</li><li>历史epoch的伪轨迹集合 $H_{i−1}$(初始为 $H_0$)</li><li>$F_i$ 和历史伪轨迹的置信度分数 $s(F_i)$ 和 $s(ĥ)$</li><li>预设的一致性阈值 $T_U$ 和置信度阈值 $T_C$</li><li>用于损失权重计算的缩放参数 $ρt$。</li></ul></li><li>过程：<ol><li>计算当前伪轨迹 $F_i$ 与 $H_{i−1}$ 中每个历史伪轨迹的余弦相似度U</li><li>从 $H_{i−1}$ 中选择与 $F_i$ 余弦相似度最高的历史伪轨迹</li><li>伪标签更新策略：<ul><li>如果 $F_i$ 与 $ĥ$ 的一致性 $U(F̂i, ĥ)$ 低于 $T_U$，或 $F̂i$ 和 $ĥ$ 中任何一个的置信度低于 $Tc$，则不选择任何伪轨迹进行监督，并将 $F̂i$ 加入 $H_{i−1}$ 形成 $Hi$ 。</li><li>否则将 $ĥ$ 和 $F̂i$ 都加入 $Hi$，并选择置信度更高的作为更新后的伪轨迹 $b_i$</li></ul></li><li>加权损失<br>$$\mathcal{L}^{tar}_{pred} &#x3D; exp (U(\hat{F}_i, \hat{h})&#x2F;ρt )\mathcal{L}_{pred} (\hat{F}_{i+1}, b_i)$$<br>使用基于一致性水平的指数函数计算目标域的预测损失权重,其目的是：<ul><li>关注高一致性的样本，优先让模型从那些更一致的样本中学习，从而提高伪标签的质量和训练的稳定性</li><li>防止误差累积: 通过一致性加权，降低模型在不一致样本上的学习权重，从而减少伪标签错误传播的风险。</li></ul></li></ol></li><li>输出：<ul><li>每个目标域智能体更新后的伪轨迹 $b_i$，用于在下一个epoch 监督其预测</li><li>加权的目标域预测损失 $L^{tar}_{pred}$，用于最终的总损失计算.</li><li>更新后的历史伪轨迹集合 $H_i$.</li></ul></li></ul><h2 id="3-轨迹诱导对比学习"><a href="#3-轨迹诱导对比学习" class="headerlink" title="3.轨迹诱导对比学习"></a>3.轨迹诱导对比学习</h2><p>通过增强相似轨迹的跨地理表示紧凑性和增强不同轨迹的表示可分离性,缓解跨地理区域智能体的表示偏差.</p><ul><li>输入：<ul><li>已更新得伪轨迹 $\hat{F}_a$ (target domain智能体) 或真值轨迹 $F_a$ (source domain智能体，用于减少误差累积)</li></ul></li><li>过程：<ol><li>根据轨迹一致性 $U(\hat{F}_a, \hat{F}_j)$ 和置信度，选择与当前智能体 $a$ 相似的轨迹作为正样本 $p$，选择不相似的轨迹作为负样本集 $Sn$</li><li>如果智能体 $a$ 属于源域，则用其真值轨迹 $Fa$ 替换预测轨迹 $\hat{F}_a$ 来进行对比学习，以减少误差累积.</li><li>对比损失计算：借鉴 InfoNCE loss，通过余弦相似度 $sim(x, y)$ 计算轨迹诱导对比损失 $L(d1,d2)$<br>$$\mathcal{L}(d_1,d_2) &#x3D; −log \frac{exp (sim(F_a,F_p)&#x2F;ρ_c)}{\sum_{j∈S_n∪p} exp (sim(F_a,F_j)&#x2F;ρ_c)}$$<br>智能体 a 被称为锚点智能体，它来自域 d1，智能体 j 是从域 d2中选取的候选智能体，用于构成 a的正样本或负样本。d1 和 d2 可以是源域 Ds 或目标域 Dt，当 d1 &#x3D; d2 时，a 和 j 来自同一个域，对应于域内对比损失，当 d1 ≠ d2时，a 和 j 来自不同的域，对应于域间对比损失。<br>分子计算锚点 $F_a$ 与正样本 $F_p$ 之间相似度的指数加权值。分母计算锚点 $F_a$与所有样本之间相似度的指数加权和。当正样本的相似度相对于所有样本的相似度越大时，损失越小。</li><li>总对比损失 $L_{con}$<ul><li>域内对比损失 $\mathcal{L}(D_s,D_s)$ 和 $\mathcal{L}(D_t,D_t)$</li><li>域间对比损失 $\mathcal{L}(D_s,D_t)$ 和 $\mathcal{L}(D_t,D_s)$</li></ul></li></ol></li><li>输出：<ul><li>总对比损失 $Lcon$，强制模型学习更具判别性的跨地理表示</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;该论文旨在利用无监督自适应技术来解决轨迹预测模型的跨域问题，提出了一个被称作Straj的模型。该模型整体架构由三个部分组成，具体细节见下文。&lt;/p&gt;
&lt;h2 id=&quot;1-模型预训练&quot;&gt;&lt;a href=&quot;#1-模型预训练&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="深度学习" scheme="https://liurun.life/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="轨迹预测" scheme="https://liurun.life/tags/%E8%BD%A8%E8%BF%B9%E9%A2%84%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用AI编辑器Trae开发浏览器插件的尝试</title>
    <link href="https://liurun.life/2025/05/%E4%BD%BF%E7%94%A8AI%E7%BC%96%E8%BE%91%E5%99%A8Trae%E5%BC%80%E5%8F%91%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
    <id>https://liurun.life/2025/05/%E4%BD%BF%E7%94%A8AI%E7%BC%96%E8%BE%91%E5%99%A8Trae%E5%BC%80%E5%8F%91%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E7%9A%84%E5%B0%9D%E8%AF%95/</id>
    <published>2025-05-29T01:13:45.000Z</published>
    <updated>2025-08-30T00:20:51.682Z</updated>
    
    <content type="html"><![CDATA[<p>最近字节出了一款对标cursor的ai编辑器Trae，我安装的是海外版，目前可以免费使用sonnect 3.5&#x2F;3.7、gemini等大模型。我尝试用它来实现一个简单的浏览器插件，效果确实很惊艳。我感觉ai在你不熟悉但是你知道有很多人熟悉的领域很有用，可以快速的帮你构建起一个大体的框架。我自己只熟悉一些基本的html、css、js知识，对于浏览器插件相关的开发规范所知甚少。整个项目的框架以及80%以上的代码都是由ai完成的，我再其中更多的充当是的一个提供信息源的角色。</p><p><img src="https://cdn.jsdelivr.net/gh/ryan1iu/ryan1iu.github.io@imgbk/images/20250529092152191.png" alt="momo-sync"></p><p>具体来说，这个插件用来将网页中的单词添加到墨墨背单词app中的云词库，从而可以利用其提供的记忆算法来帮助加深记忆。墨墨背单词提供了开放API来帮助开发者实现云词库的同步功能。</p><div style="display: flex; gap: 10px;">  <!-- 左边两张短图 -->  <div style="display: flex; flex-direction: column; gap: 10px; flex: 1;">    <img src="https://cdn.jsdelivr.net/gh/ryan1iu/ryan1iu.github.io@imgbk/images/20250529092641967.png" alt="promot" style="width: 100%;" />    <img src="https://cdn.jsdelivr.net/gh/ryan1iu/ryan1iu.github.io@imgbk/images/20250529093322619.png" style="width: 100%;" alt="图片1">  </div>  <!-- 右边一张长图 -->  <div style="flex: 1;">    <img src="https://cdn.jsdelivr.net/gh/ryan1iu/ryan1iu.github.io@imgbk/images/20250529093411299.png" style="width: 100%;" alt="图片2">  </div></div><p>上图是我对ai的初始指令，在我下达命令之后ai很快的就生成了基本的代码框架，并且可以“正确”的运行。但是最初生成的代码存在很多问题，例如前端的ui非常不协调、对墨墨背单词开放api的调用不符合规范、不能够正确理解墨墨背单词api提供的功能。这些问题都需要我去查明并指出ai的错误，然后给出足够的信息或者示例来让他进行改正。</p><p>最终花了一个下午的时间把这个插件的基本功能开发完成了，后面的logo设计也是由ai完成的。感觉目前ai还不能够完全替代人类，但是按照现在的发展速度，可能那一天也很快会到来吧。到那个时候一个人再搭配上各种agent就能组成一个开发团队了，可能个人开发者的职能会慢慢的向产品经理靠拢了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近字节出了一款对标cursor的ai编辑器Trae，我安装的是海外版，目前可以免费使用sonnect 3.5&amp;#x2F;3.7、gemini等大模型。我尝试用它来实现一个简单的浏览器插件，效果确实很惊艳。我感觉ai在你不熟悉但是你知道有很多人熟悉的领域很有用，可以快速的帮</summary>
      
    
    
    
    <category term="折腾" scheme="https://liurun.life/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="AI" scheme="https://liurun.life/tags/AI/"/>
    
    <category term="浏览器插件" scheme="https://liurun.life/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>将Garmin手表运动数据从国际服迁移到国服的过程记录</title>
    <link href="https://liurun.life/2025/05/Garmin-account-data-migrate/"/>
    <id>https://liurun.life/2025/05/Garmin-account-data-migrate/</id>
    <published>2025-05-26T13:21:36.000Z</published>
    <updated>2025-08-30T00:20:51.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近想把自己的Garmin手表添加到微信设备上从而可以将运动记录同步到微信运动, 但是只支持绑定国区账号. 我的运动数据都是在国际服账号中,因此花费了一些时间研究了一下如何进行数据迁移, 最终检索到了以下几种方案:</p><ol><li>有一个开源的项目可以帮助用户自动化定期在国际服和国服账号之间同步数据: <a href="https://github.com/gooin/dailysync-rev">dailysync-rev</a></li><li>如果不想自己部署, 有一个网站部署了上面那个项目并且提供免费同步服务: <a href="https://dailysync.vyzt.dev/">DailySync</a></li><li>Garmin账号中心提供了导出数据的选项, 可以自己手动导出, 然后再导入到另一个账号</li><li>直接将手表通过USB连接到电脑, 手表中保存了运动记录, 直接复制出来并导入到另一个账号</li></ol><blockquote><p>上面这几种方案我只研究了如何迁移运动数据, 对于其他的健康数据比如HRV, 睡眠等等, 我没有找到办法, 不过方案2里面的网站好像提供付费的健康数据迁移服务, 不知道怎么做到的.</p></blockquote><h2 id="我的选择"><a href="#我的选择" class="headerlink" title="我的选择"></a>我的选择</h2><p>我认为方法4是最方便的, 也是我最终选择的方案. 不过方法4是我最后偶然间才得知的, 在此之前我先后尝试了方法1,2,3, 下面我将介绍自己为什么没有采用这些方案.</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>我尝试在自己的VPS上通过该项目提供的docker方式进行部署, 在我确认账号和密码设置正确的情况下, 该项目无法正常工作, 总是抛出权限错误, 我不想在上面花太多时间, 于是转向了方案二.</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>方案二只支持同步当前及以后的数据, 要是需要对以前的数据进行批量迁移的话, 得花钱…, 放弃.<br><img src="https://cdn.jsdelivr.net/gh/ryan1iu/ryan1iu.github.io@imgbk/images/20250526214652999.png" alt="img"></p><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>我登录国际区账号, 并且按照网上的方法申请了导出数据, 大概两个小时之后收到了官方的邮件. 但是在我尝试导入官方提供的数据到另一个账户时, 虽然提示导入成功, 但实际上并没有…, 不知道什么原因, 放弃.</p><h3 id="方案四"><a href="#方案四" class="headerlink" title="方案四"></a>方案四</h3><p>就在我准备放弃的时候, 我看到了一位网友的评论留言, 我才意识到其实运动记录都有保存在手表中的,<br><img src="https://cdn.jsdelivr.net/gh/ryan1iu/ryan1iu.github.io@imgbk/images/20250521155232322.png" alt="img"><br>通过USB线连接手表到电脑, 导航到Activity下, 所有的以.fit结尾的运动记录都在里面了, 打开国服Garmin Connect, 然后点击页面右上角的导入数据按钮, 全选, 导入, 结束… 折腾了半天最后一分钟搞定.<br><img src="https://cdn.jsdelivr.net/gh/ryan1iu/ryan1iu.github.io@imgbk/images/20250521155312980.png" alt="fit"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近想把自己的Garmin手表添加到微信设备上从而可以将运动记录同步到微信运动, 但是只支持绑定国区账号. 我的运动数据都是</summary>
      
    
    
    
    <category term="折腾" scheme="https://liurun.life/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Garmin" scheme="https://liurun.life/tags/Garmin/"/>
    
  </entry>
  
  <entry>
    <title>从Neovim迁移到VScode的过程记录</title>
    <link href="https://liurun.life/2025/05/neovim-to-vscode/"/>
    <id>https://liurun.life/2025/05/neovim-to-vscode/</id>
    <published>2025-05-24T13:20:48.000Z</published>
    <updated>2025-08-30T00:20:51.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h2><p>没错, 你没看错, 你可能听说过很多如何从Vscode迁移到Vim\Neovim的案例, 但是我的经历有点不太一样. 一般人的经历可能是从文本编辑器-&gt;简单的集成环境(VC6\Dev-C++)-&gt;现代IDE(Visual Studio\Visual Studio Code). 我的经历是这样的: 文本编辑器-&gt;VC6.0-&gt;Vim-&gt;Neovim.</p><p>这要从我在刚开始学计算机的时候接触的一个名为”计算机教育中缺失的一课”的通识课程讲起, 这个课程给予了Vim极高的评价, 我至今还记得其评价Vim为唯一能跟上使用者思维的编辑器. 当然这个评价的确很贴切(这也是我要坚持在vscode中使用vim mode的原因), 但是却让我陷入了与vim的各种配置”斗智斗勇”无法自拔的泥潭. 总之, 为了让自己用的顺手, 我在各种配置上花费了大量的时间, 也花费了很多时间去调试各种插件, 这给了我一种hacker的错觉, 但事实是这些配置非但没有帮助我提升自己的编程能力, 反而还让我把大量的时间浪费在这些与提升编程能力无关的事情上. 综上, 恰逢微软在前两天的Build的大会上宣布要将vscode打造成一个开源的ai编辑器, 我便萌生了从neovim迁移到vscode的打算.</p><p>我的计划如下:</p><ol><li>首先熟悉vscode的设计理念, 熟悉其使用逻辑, 重点熟悉重要的功能</li><li>安装vim插件, 先保证基本的编辑体验, 调整一些快捷键来符合自己的使用习惯, 比如LSP相关的快捷键.</li><li>寻找neovim比较好用的插件提供的功能的替代方案</li><li>…</li></ol><p>这篇文章会进行持续更新和记录我的迁移过程, 直到我觉得满意或放弃迁移(如果放弃这篇文章大概也会删掉吧…).</p><h2 id="Step1-熟悉VScode"><a href="#Step1-熟悉VScode" class="headerlink" title="Step1. 熟悉VScode"></a>Step1. 熟悉VScode</h2><p>先把官方文档中的<strong>GET STARTED</strong>章节简单过了一遍, 文档中阐述了很多关键词或者关键概念, 无论是对于我能够对VSCode有一个整体的认识和把我, 抑或能够帮助我与他人进行针对性的沟通交流，还是遇到问题时可以定位到具体的部分并进行针对性的检索, 这些概念的熟悉都至关重要。</p><p><img src="https://cdn.jsdelivr.net/gh/ryan1iu/ryan1iu.github.io@imgbk/images/20250528163039239.png" alt="layout"></p><p>上面是我从官方文档借来的一张图，非常清晰直观的展示了VScode的用户界面布局。</p><ul><li>Editor - The main area to edit your files. You can open as many editors as you like side by side vertically and horizontally.</li><li>Primary Side Bar - Contains different views like the Explorer to assist you while working on your project.</li><li>Secondary Side Bar - Opposite the Primary Side Bar. By default, contains the Chat view. Drag and drop views from the Primary Side Bar to the Secondary Side Bar to move them.</li><li>Status Bar - Information about the opened project and the files you edit.</li><li>Activity Bar - Located on the far left-hand side. Lets you switch between views and gives you additional context-specific indicators, like the number of outgoing changes when Git is enabled. You can change the position of the Activity Bar.</li><li>Panel - An additional space for views below the editor region. By default, it contains output, debug information, errors and warnings, and an integrated terminal. The Panel can also be moved to the left or right for more vertical space.</li></ul><p>左侧的那一排图标被称为Activity Bar，里面的工具可以提供不同的views，这些views所在的Container被称为Primary Side Bar。除了Primary Side Bar，在最右侧还有一个Secondary Side Bar，默认提供Copilot Chat还有Outline views。不同的views可以通过拖拽放置到不同的Container中。最下方的Container被称为Panel，默认包含了一些output、debug information、integrated termianl等等views。</p><p>最中间当然也是我最关心的部分就是Editor，也是将来vim extension主要工作的地方。</p><p>文档中写的很详细，包括各种views的介绍，还有一些vscode自身的特性等等，我并不想一开始就陷入到阅读这些繁杂的内容当中，我当前的目标是能够保证一个基本的编辑体验，so, Let’s get started.</p><h2 id="Step2-安装VIM-Extension"><a href="#Step2-安装VIM-Extension" class="headerlink" title="Step2. 安装VIM Extension"></a>Step2. 安装VIM Extension</h2><p>OK, vim插件安装完毕，我遇到的几个核心痛点：</p><ol><li>当处于编辑模式中时，vim会劫持CTRL键，从而导致vscode默认提供的快捷键失效</li><li>没有LSP相关的快捷键</li><li>中英文输入法切换很麻烦</li></ol><h3 id="Problem1"><a href="#Problem1" class="headerlink" title="Problem1"></a>Problem1</h3><p>针对我之前提到的vim会劫持Ctrl的问题，文档中提到了一种办法，大概是这样配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;vim.handleKeys&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;&lt;C-j&gt;&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;&lt;C-p&gt;&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;&lt;C-b&gt;&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>意思是vim会停止接管这些按键并交给vscode处理，这样我在编辑的时候就可以通过Ctrl+j键方便的打开终端了，很实用。</p><h3 id="Problem2"><a href="#Problem2" class="headerlink" title="Problem2"></a>Problem2</h3><p>阅读了一下vim extension官方文档，有两种办法，一种是改全局快捷键绑定，比如你想设置[“g”, “g”]为Go to definiton, 直接把默认的f12快捷键换成gg，但是我试了一下，这样做有个问题，就是如果你想在其他地方比如temrinal中输入g时，输不进去了，它会一直等待另一个g，反正是行不太通。</p><p>第二种办法就是改vim配置，文档写的很多，大意是需要针对不同的模式进行针对性配置，具体可以看文档。比如我像在normal模式下按下gr键触发show References，我就可以这么配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;vim.normalModeKeyBindings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;r&quot;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;editor.action.goToReferences&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>意思是说当我在Normal模式下按下gr时，触发editor.action.goToReferences动作。其他的不同模式下的自定义配置都是类似的方法。</p><p>除了gr，我还设置了一些其他的供参考：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;vim.leader&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;vim.normalModeKeyBindings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    </span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;leader&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;e&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;workbench.view.explorer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;d&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;editor.action.revealDefinition&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;D&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;editor.action.revealDeclaration&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;K&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;editor.action.showHover&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;i&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;editor.action.goToImplementation&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="Problem3"><a href="#Problem3" class="headerlink" title="Problem3"></a>Problem3</h3><p>我选择在具体的项目中用英文…</p><p>对于博客这种必须要写中文的，emmm，反正我更新的也很慢，先忍忍，后面再说。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;WHY&quot;&gt;&lt;a href=&quot;#WHY&quot; class=&quot;headerlink&quot; title=&quot;WHY&quot;&gt;&lt;/a&gt;WHY&lt;/h2&gt;&lt;p&gt;没错, 你没看错, 你可能听说过很多如何从Vscode迁移到Vim&#92;Neovim的案例, 但是我的经历有点不太一样. 一般人的经历可</summary>
      
    
    
    
    
    <category term="Neovim" scheme="https://liurun.life/tags/Neovim/"/>
    
    <category term="VScode" scheme="https://liurun.life/tags/VScode/"/>
    
    <category term="IDE" scheme="https://liurun.life/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>为Cactus引入霞鹜文楷并使用CDN加速访问</title>
    <link href="https://liurun.life/2025/05/%E4%B8%BAcactus%E5%BC%95%E5%85%A5%E9%9C%9E%E9%B9%9C%E6%96%87%E6%A5%B7%E5%B9%B6%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE/"/>
    <id>https://liurun.life/2025/05/%E4%B8%BAcactus%E5%BC%95%E5%85%A5%E9%9C%9E%E9%B9%9C%E6%96%87%E6%A5%B7%E5%B9%B6%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE/</id>
    <published>2025-05-09T01:25:42.000Z</published>
    <updated>2025-08-30T00:20:51.682Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/lxgw/LxgwWenKai">霞鹜文楷</a>是我本人比较喜欢的一款开源中文字体,兼有仿宋和楷体的特点.<br>本文介绍如何为Cactus主题添加霞鹜文楷并为其启用CDN加速.</p><h2 id="字体选择"><a href="#字体选择" class="headerlink" title="字体选择"></a>字体选择</h2><p>因为中文字体普遍包含数千到数万个汉字,所以字体的文件体积较大. 所以为了优化字体的加载体验,我最开始选择了其提供的LxgwWenKai-Lite版本,但是后来发现它也有提供LxgwWenKai-Screen版本,因为默认的字体的字重比较细,不太适合屏幕阅读, Screen对自动进行了一些调整使其能够带来更好的阅读体验. 而且我发现Screen版本的字体大小和Lite版本差不多大, 因此便选择使用Screen版本.</p><h2 id="使用CDN加速"><a href="#使用CDN加速" class="headerlink" title="使用CDN加速"></a>使用CDN加速</h2><p>我们借助<a href="https://github.com/chawyehsu/lxgw-wenkai-webfont">lxgwwenkai-webfont</a>项目来进行. 这个项目将tff转换为了更适合网站使用的woff2,并提供了CDN包.</p><h3 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h3><p>打开主题下的_config.yml, 找到cdn配置的部分,添加以下内容:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cdn:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">lxgw_wenkai:</span> <span class="string">https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-webfont@1.1.0/lxgwwenkaiscreen.css</span></span><br></pre></td></tr></table></figure><p>然后找到layout&#x2F;_partial&#x2F;styles.ejs, 在最下方添加如下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (isCdnEnable(&#x27;lxgw_wenkai&#x27;)) &#123; %&gt;</span><br><span class="line">  &lt;%- getCdnLink(&#x27;lxgw_wenkai&#x27;, &#123;preload: true&#125;) %&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">  &lt;link</span><br><span class="line">    rel=&quot;preload&quot;</span><br><span class="line">    href=&quot;&lt;%- url_for(&#x27;/lib/lxgw-wenkai-screen-webfont-1.1.0/package/lxgwwenkaiscreen.css&#x27;) %&gt;&quot;</span><br><span class="line">    as=&quot;style&quot;</span><br><span class="line">    onload=&quot;this.onload=null;this.rel=&#x27;stylesheet&#x27;&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;noscript</span><br><span class="line">    &gt;&lt;link</span><br><span class="line">      rel=&quot;stylesheet&quot;</span><br><span class="line">      href=&quot;&lt;%- url_for(&#x27;/lib/lxgw-wenkai-screen-webfont-1.1.0/package/lxgwwenkaiscreen.css&#x27;) %&gt;&quot;</span><br><span class="line">  /&gt;&lt;/noscript&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>如果你不想开启CDN加速,可以将这个包下载到本地的主题下的lib目录下. <a href="https://www.jsdelivr.com/package/npm/lxgw-wenkai-screen-webfont">下载地址</a>,注意下载的版本,我选择的是1.1.0版本,因为用的人最多,我觉得可能加速效果会好一些吧.</p><p>找到source&#x2F;css&#x2F;_variables.styl, 设置霞鹜文楷优先被加载.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$font-family-body</span> <span class="string">=</span> <span class="string">&quot;LXGW WenKai Screen&quot;</span><span class="string">,</span> <span class="string">&quot;Menlo&quot;</span><span class="string">,</span> <span class="string">&quot;Meslo LG&quot;</span><span class="string">,</span> <span class="string">monospace</span></span><br></pre></td></tr></table></figure><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>即可预览最终效果. 无论你有问题或建议,欢迎在下方留言讨论.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/lxgw/LxgwWenKai&quot;&gt;霞鹜文楷&lt;/a&gt;是我本人比较喜欢的一款开源中文字体,兼有仿宋和楷体的特点.&lt;br&gt;本文介绍如何为Cactus主题添加霞鹜文楷并为其启用CDN加速.&lt;/p&gt;
&lt;h2 id=&quot;字体选择&quot;&gt;</summary>
      
    
    
    
    <category term="折腾" scheme="https://liurun.life/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="cactus" scheme="https://liurun.life/tags/cactus/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github Pages/Actions 自动化部署经验谈</title>
    <link href="https://liurun.life/2025/05/Hexo-Github-Pages-Actions-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://liurun.life/2025/05/Hexo-Github-Pages-Actions-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</id>
    <published>2025-05-08T04:16:35.000Z</published>
    <updated>2025-08-30T00:20:51.682Z</updated>
    
    <content type="html"><![CDATA[<p>本文不会介绍如何安装以及配置Hexo,而是着重于对我摸索出的一套Hexo管理和自动化部署的实践流程进行梳理和总结.阅读完本文,你将会了解:</p><ul><li>如何使用submodules管理主题</li><li>如何实现在维护自己的个人主题配置的同时能够同步主题上游的最新改动.</li><li>如何使用Github Actions实现自动化部署</li></ul><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>我的当前的机器环境为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ hexo -v</span><br><span class="line">hexo: 7.3.0</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: linux 5.15.167.4-microsoft-standard-WSL2 Ubuntu 24.04.1 LTS</span><br><span class="line">node: 22.15.0</span><br></pre></td></tr></table></figure><p>本文假设你已经安装并配置好了Hexo环境并且熟悉基本的git和github操作.如果不熟悉的话推荐先阅读一下<a href="https://beej.us/guide/bggit/">beej’s guide to git</a></p><h2 id="主题管理"><a href="#主题管理" class="headerlink" title="主题管理"></a>主题管理</h2><p>本节介绍如何添加并维护一个主题的配置.如果你不打算使用第三方主题,可以跳过.<br>假设我们希望使用<a href="https://github.com/probberechts/hexo-theme-cactus">hexo-theme-cactus</a>作为博客的主题.首先将这个主题仓库fork一份到自己的Github仓库,然后将fork出来的仓库以git submodules的方式添加到本地:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/ryan1iu/hexo-theme-cactus.git themes/cactus</span><br><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure><p>然后进入主题文件夹,创建一个新的分支比如dev,用来保存自己的自定义配置.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch -c dev</span><br></pre></td></tr></table></figure><p>在我们完成自己的配置之后就可以将修改commit并push到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit</span><br><span class="line">git push -u origin</span><br></pre></td></tr></table></figure><h3 id="与上游保持同步"><a href="#与上游保持同步" class="headerlink" title="与上游保持同步"></a>与上游保持同步</h3><p>为了能够在后续主题更新时能够同步更新,将原主题仓库添加为上游仓库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https://github.com/probberechts/hexo-theme-cactus.git</span><br></pre></td></tr></table></figure><p>之后可以通过pull来同步主题的更改.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull upstream master</span><br></pre></td></tr></table></figure><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p>本节介绍如何利用Github Action实现自动化构建和部署</p><p>在本地创建一个工作流,新建.github&#x2F;workflows&#x2F;deploy.yml,写入以下内容(需要根据你自己的环境进行必要的调整):</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">site</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发条件：每次推送到 master 分支时触发部署</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-24.04</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Update</span> <span class="string">submodules</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git submodule update --init --recursive  # 拉取并初始化子模块</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 安装 Node.js 和 Hexo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;22.15.0&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 构建 Hexo 站点</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">the</span> <span class="string">site</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 部署到 GitHub Pages</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">folder:</span> <span class="string">public</span></span><br><span class="line">          <span class="attr">clean:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">single-commit:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>保存修改并提交.</p><h3 id="创建远程仓库并同步"><a href="#创建远程仓库并同步" class="headerlink" title="创建远程仓库并同步"></a>创建远程仓库并同步</h3><p>手动在GitHub创建一个仓库来存放博客源码,比如我的博客源码仓库为<code>https://github.com/ryan1iu/ryan1iu.github.io.git</code>,将本地博客源码同步到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/ryan1iu/ryan1iu.github.io.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>在每次推送到master分支后都会出发我们上面设置好的任务,具体来说,该任务会自动进行:</p><ol><li>创建一个ubuntu 24.04虚拟环境.</li><li>clone当前仓库.</li><li>初始化并更新子模块.</li><li>设置Nodejs环境.</li><li>根据package.json安装依赖.</li><li>执行hexo generate构建站点并输出到public文件夹.</li><li>将public文件夹下的文件部署到gp-pages分支(这个分支时github actions自动创建的,无需手动创建).</li></ol><h3 id="Github-pages设置"><a href="#Github-pages设置" class="headerlink" title="Github pages设置"></a>Github pages设置</h3><p>在博客源码仓库的设置页面找到Pages设置页,将Build and deployment设置为Deploy from a Branch,Branch选择gh-pages,Path设置为&#x2F;(root).<br>之后就可以visit site了.</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>文章写的比较”粗糙”,旨在提供一个大致的思路.如果有什么问题欢迎在评论区留言讨论.如果你有更好的办法和建议,也欢迎分享.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文不会介绍如何安装以及配置Hexo,而是着重于对我摸索出的一套Hexo管理和自动化部署的实践流程进行梳理和总结.阅读完本文,你将会了解:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何使用submodules管理主题&lt;/li&gt;
&lt;li&gt;如何实现在维护自己的个人主题配置的同时能够同步主题上</summary>
      
    
    
    
    <category term="工作流" scheme="https://liurun.life/categories/%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
    
    <category term="Hexo" scheme="https://liurun.life/tags/Hexo/"/>
    
  </entry>
  
</feed>
